/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IProtocolRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "depositBatch"
      | "depositRewards"
      | "withdraw"
      | "withdrawWithSig"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "RewardsDeposit" | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBatch",
    values: [AddressLike[], BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewards",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWithSig",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWithSig",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    reason: BytesLike,
    amount: BigNumberish,
    comment: string
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    reason: string,
    amount: bigint,
    comment: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    reason: string;
    amount: bigint;
    comment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDepositEvent {
  export type InputTuple = [
    creator: AddressLike,
    createReferral: AddressLike,
    mintReferral: AddressLike,
    firstMinter: AddressLike,
    zora: AddressLike,
    from: AddressLike,
    creatorReward: BigNumberish,
    createReferralReward: BigNumberish,
    mintReferralReward: BigNumberish,
    firstMinterReward: BigNumberish,
    zoraReward: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    createReferral: string,
    mintReferral: string,
    firstMinter: string,
    zora: string,
    from: string,
    creatorReward: bigint,
    createReferralReward: bigint,
    mintReferralReward: bigint,
    firstMinterReward: bigint,
    zoraReward: bigint
  ];
  export interface OutputObject {
    creator: string;
    createReferral: string;
    mintReferral: string;
    firstMinter: string;
    zora: string;
    from: string;
    creatorReward: bigint;
    createReferralReward: bigint;
    mintReferralReward: bigint;
    firstMinterReward: bigint;
    zoraReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IProtocolRewards extends BaseContract {
  connect(runner?: ContractRunner | null): IProtocolRewards;
  waitForDeployment(): Promise<this>;

  interface: IProtocolRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [to: AddressLike, why: BytesLike, comment: string],
    [void],
    "payable"
  >;

  depositBatch: TypedContractMethod<
    [
      recipients: AddressLike[],
      amounts: BigNumberish[],
      reasons: BytesLike[],
      comment: string
    ],
    [void],
    "payable"
  >;

  depositRewards: TypedContractMethod<
    [
      creator: AddressLike,
      creatorReward: BigNumberish,
      createReferral: AddressLike,
      createReferralReward: BigNumberish,
      mintReferral: AddressLike,
      mintReferralReward: BigNumberish,
      firstMinter: AddressLike,
      firstMinterReward: BigNumberish,
      zora: AddressLike,
      zoraReward: BigNumberish
    ],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawWithSig: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [to: AddressLike, why: BytesLike, comment: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositBatch"
  ): TypedContractMethod<
    [
      recipients: AddressLike[],
      amounts: BigNumberish[],
      reasons: BytesLike[],
      comment: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositRewards"
  ): TypedContractMethod<
    [
      creator: AddressLike,
      creatorReward: BigNumberish,
      createReferral: AddressLike,
      createReferralReward: BigNumberish,
      mintReferral: AddressLike,
      mintReferralReward: BigNumberish,
      firstMinter: AddressLike,
      firstMinterReward: BigNumberish,
      zora: AddressLike,
      zoraReward: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawWithSig"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDeposit"
  ): TypedContractEvent<
    RewardsDepositEvent.InputTuple,
    RewardsDepositEvent.OutputTuple,
    RewardsDepositEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,address,bytes4,uint256,string)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "RewardsDeposit(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RewardsDepositEvent.InputTuple,
      RewardsDepositEvent.OutputTuple,
      RewardsDepositEvent.OutputObject
    >;
    RewardsDeposit: TypedContractEvent<
      RewardsDepositEvent.InputTuple,
      RewardsDepositEvent.OutputTuple,
      RewardsDepositEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
