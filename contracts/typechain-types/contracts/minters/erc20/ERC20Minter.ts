/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IERC20Minter {
  export type SalesConfigStruct = {
    saleStart: BigNumberish;
    saleEnd: BigNumberish;
    maxTokensPerAddress: BigNumberish;
    pricePerToken: BigNumberish;
    fundsRecipient: AddressLike;
    currency: AddressLike;
  };

  export type SalesConfigStructOutput = [
    saleStart: bigint,
    saleEnd: bigint,
    maxTokensPerAddress: bigint,
    pricePerToken: bigint,
    fundsRecipient: string,
    currency: string
  ] & {
    saleStart: bigint;
    saleEnd: bigint;
    maxTokensPerAddress: bigint;
    pricePerToken: bigint;
    fundsRecipient: string;
    currency: string;
  };

  export type RewardsSettingsStruct = {
    createReferralReward: BigNumberish;
    mintReferralReward: BigNumberish;
    zoraReward: BigNumberish;
    firstMinterReward: BigNumberish;
  };

  export type RewardsSettingsStructOutput = [
    createReferralReward: bigint,
    mintReferralReward: bigint,
    zoraReward: bigint,
    firstMinterReward: bigint
  ] & {
    createReferralReward: bigint;
    mintReferralReward: bigint;
    zoraReward: bigint;
    firstMinterReward: bigint;
  };
}

export declare namespace ICreatorCommands {
  export type CommandStruct = { method: BigNumberish; args: BytesLike };

  export type CommandStructOutput = [method: bigint, args: string] & {
    method: bigint;
    args: string;
  };

  export type CommandSetStruct = {
    commands: ICreatorCommands.CommandStruct[];
    at: BigNumberish;
  };

  export type CommandSetStructOutput = [
    commands: ICreatorCommands.CommandStructOutput[],
    at: bigint
  ] & { commands: ICreatorCommands.CommandStructOutput[]; at: bigint };
}

export interface ERC20MinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "computePaidMintRewards"
      | "computeReward"
      | "computeTotalReward"
      | "contractName"
      | "contractURI"
      | "contractVersion"
      | "getCreateReferral"
      | "getFirstMinter"
      | "getMintedPerWallet"
      | "initialize"
      | "mint"
      | "requestMint"
      | "resetSale"
      | "sale"
      | "setSale"
      | "setZoraRewardsRecipient"
      | "supportsInterface"
      | "totalRewardPct"
      | "zoraRewardRecipientAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC20MinterInitialized"
      | "ERC20RewardsDeposit"
      | "MintComment"
      | "SaleSet"
      | "ZoraRewardsRecipientSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "computePaidMintRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTotalReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateReferral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstMinter",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintedPerWallet",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestMint",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sale",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSale",
    values: [BigNumberish, IERC20Minter.SalesConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setZoraRewardsRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zoraRewardRecipientAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "computePaidMintRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTotalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintedPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setZoraRewardsRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zoraRewardRecipientAddress",
    data: BytesLike
  ): Result;
}

export namespace ERC20MinterInitializedEvent {
  export type InputTuple = [rewardPercentage: BigNumberish];
  export type OutputTuple = [rewardPercentage: bigint];
  export interface OutputObject {
    rewardPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20RewardsDepositEvent {
  export type InputTuple = [
    createReferral: AddressLike,
    mintReferral: AddressLike,
    firstMinter: AddressLike,
    zora: AddressLike,
    collection: AddressLike,
    currency: AddressLike,
    tokenId: BigNumberish,
    createReferralReward: BigNumberish,
    mintReferralReward: BigNumberish,
    firstMinterReward: BigNumberish,
    zoraReward: BigNumberish
  ];
  export type OutputTuple = [
    createReferral: string,
    mintReferral: string,
    firstMinter: string,
    zora: string,
    collection: string,
    currency: string,
    tokenId: bigint,
    createReferralReward: bigint,
    mintReferralReward: bigint,
    firstMinterReward: bigint,
    zoraReward: bigint
  ];
  export interface OutputObject {
    createReferral: string;
    mintReferral: string;
    firstMinter: string;
    zora: string;
    collection: string;
    currency: string;
    tokenId: bigint;
    createReferralReward: bigint;
    mintReferralReward: bigint;
    firstMinterReward: bigint;
    zoraReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintCommentEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenContract: AddressLike,
    tokenId: BigNumberish,
    quantity: BigNumberish,
    comment: string
  ];
  export type OutputTuple = [
    sender: string,
    tokenContract: string,
    tokenId: bigint,
    quantity: bigint,
    comment: string
  ];
  export interface OutputObject {
    sender: string;
    tokenContract: string;
    tokenId: bigint;
    quantity: bigint;
    comment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleSetEvent {
  export type InputTuple = [
    mediaContract: AddressLike,
    tokenId: BigNumberish,
    salesConfig: IERC20Minter.SalesConfigStruct
  ];
  export type OutputTuple = [
    mediaContract: string,
    tokenId: bigint,
    salesConfig: IERC20Minter.SalesConfigStructOutput
  ];
  export interface OutputObject {
    mediaContract: string;
    tokenId: bigint;
    salesConfig: IERC20Minter.SalesConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZoraRewardsRecipientSetEvent {
  export type InputTuple = [
    prevRecipient: AddressLike,
    newRecipient: AddressLike
  ];
  export type OutputTuple = [prevRecipient: string, newRecipient: string];
  export interface OutputObject {
    prevRecipient: string;
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC20Minter extends BaseContract {
  connect(runner?: ContractRunner | null): ERC20Minter;
  waitForDeployment(): Promise<this>;

  interface: ERC20MinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  computePaidMintRewards: TypedContractMethod<
    [totalReward: BigNumberish],
    [IERC20Minter.RewardsSettingsStructOutput],
    "view"
  >;

  computeReward: TypedContractMethod<
    [totalReward: BigNumberish, rewardPct: BigNumberish],
    [bigint],
    "view"
  >;

  computeTotalReward: TypedContractMethod<
    [totalValue: BigNumberish],
    [bigint],
    "view"
  >;

  contractName: TypedContractMethod<[], [string], "view">;

  contractURI: TypedContractMethod<[], [string], "view">;

  contractVersion: TypedContractMethod<[], [string], "view">;

  getCreateReferral: TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;

  getFirstMinter: TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;

  getMintedPerWallet: TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish, wallet: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_zoraRewardRecipientAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [
      mintTo: AddressLike,
      quantity: BigNumberish,
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      totalValue: BigNumberish,
      currency: AddressLike,
      mintReferral: AddressLike,
      comment: string
    ],
    [void],
    "nonpayable"
  >;

  requestMint: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [ICreatorCommands.CommandSetStructOutput],
    "view"
  >;

  resetSale: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  sale: TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [IERC20Minter.SalesConfigStructOutput],
    "view"
  >;

  setSale: TypedContractMethod<
    [tokenId: BigNumberish, salesConfig: IERC20Minter.SalesConfigStruct],
    [void],
    "nonpayable"
  >;

  setZoraRewardsRecipient: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalRewardPct: TypedContractMethod<[], [bigint], "view">;

  zoraRewardRecipientAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "computePaidMintRewards"
  ): TypedContractMethod<
    [totalReward: BigNumberish],
    [IERC20Minter.RewardsSettingsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeReward"
  ): TypedContractMethod<
    [totalReward: BigNumberish, rewardPct: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTotalReward"
  ): TypedContractMethod<[totalValue: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "contractName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contractVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCreateReferral"
  ): TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFirstMinter"
  ): TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMintedPerWallet"
  ): TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish, wallet: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_zoraRewardRecipientAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      mintTo: AddressLike,
      quantity: BigNumberish,
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      totalValue: BigNumberish,
      currency: AddressLike,
      mintReferral: AddressLike,
      comment: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestMint"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [ICreatorCommands.CommandSetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "resetSale"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sale"
  ): TypedContractMethod<
    [tokenContract: AddressLike, tokenId: BigNumberish],
    [IERC20Minter.SalesConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setSale"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salesConfig: IERC20Minter.SalesConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setZoraRewardsRecipient"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalRewardPct"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "zoraRewardRecipientAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ERC20MinterInitialized"
  ): TypedContractEvent<
    ERC20MinterInitializedEvent.InputTuple,
    ERC20MinterInitializedEvent.OutputTuple,
    ERC20MinterInitializedEvent.OutputObject
  >;
  getEvent(
    key: "ERC20RewardsDeposit"
  ): TypedContractEvent<
    ERC20RewardsDepositEvent.InputTuple,
    ERC20RewardsDepositEvent.OutputTuple,
    ERC20RewardsDepositEvent.OutputObject
  >;
  getEvent(
    key: "MintComment"
  ): TypedContractEvent<
    MintCommentEvent.InputTuple,
    MintCommentEvent.OutputTuple,
    MintCommentEvent.OutputObject
  >;
  getEvent(
    key: "SaleSet"
  ): TypedContractEvent<
    SaleSetEvent.InputTuple,
    SaleSetEvent.OutputTuple,
    SaleSetEvent.OutputObject
  >;
  getEvent(
    key: "ZoraRewardsRecipientSet"
  ): TypedContractEvent<
    ZoraRewardsRecipientSetEvent.InputTuple,
    ZoraRewardsRecipientSetEvent.OutputTuple,
    ZoraRewardsRecipientSetEvent.OutputObject
  >;

  filters: {
    "ERC20MinterInitialized(uint256)": TypedContractEvent<
      ERC20MinterInitializedEvent.InputTuple,
      ERC20MinterInitializedEvent.OutputTuple,
      ERC20MinterInitializedEvent.OutputObject
    >;
    ERC20MinterInitialized: TypedContractEvent<
      ERC20MinterInitializedEvent.InputTuple,
      ERC20MinterInitializedEvent.OutputTuple,
      ERC20MinterInitializedEvent.OutputObject
    >;

    "ERC20RewardsDeposit(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ERC20RewardsDepositEvent.InputTuple,
      ERC20RewardsDepositEvent.OutputTuple,
      ERC20RewardsDepositEvent.OutputObject
    >;
    ERC20RewardsDeposit: TypedContractEvent<
      ERC20RewardsDepositEvent.InputTuple,
      ERC20RewardsDepositEvent.OutputTuple,
      ERC20RewardsDepositEvent.OutputObject
    >;

    "MintComment(address,address,uint256,uint256,string)": TypedContractEvent<
      MintCommentEvent.InputTuple,
      MintCommentEvent.OutputTuple,
      MintCommentEvent.OutputObject
    >;
    MintComment: TypedContractEvent<
      MintCommentEvent.InputTuple,
      MintCommentEvent.OutputTuple,
      MintCommentEvent.OutputObject
    >;

    "SaleSet(address,uint256,tuple)": TypedContractEvent<
      SaleSetEvent.InputTuple,
      SaleSetEvent.OutputTuple,
      SaleSetEvent.OutputObject
    >;
    SaleSet: TypedContractEvent<
      SaleSetEvent.InputTuple,
      SaleSetEvent.OutputTuple,
      SaleSetEvent.OutputObject
    >;

    "ZoraRewardsRecipientSet(address,address)": TypedContractEvent<
      ZoraRewardsRecipientSetEvent.InputTuple,
      ZoraRewardsRecipientSetEvent.OutputTuple,
      ZoraRewardsRecipientSetEvent.OutputObject
    >;
    ZoraRewardsRecipientSet: TypedContractEvent<
      ZoraRewardsRecipientSetEvent.InputTuple,
      ZoraRewardsRecipientSetEvent.OutputTuple,
      ZoraRewardsRecipientSetEvent.OutputObject
    >;
  };
}
