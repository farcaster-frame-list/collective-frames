/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IZora1155Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminMint"
      | "createReferrals"
      | "firstMinters"
      | "getCreatorRewardRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminMint",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createReferrals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "firstMinters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorRewardRecipient",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "adminMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorRewardRecipient",
    data: BytesLike
  ): Result;
}

export interface IZora1155 extends BaseContract {
  connect(runner?: ContractRunner | null): IZora1155;
  waitForDeployment(): Promise<this>;

  interface: IZora1155Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminMint: TypedContractMethod<
    [
      recipient: AddressLike,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createReferrals: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  firstMinters: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCreatorRewardRecipient: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminMint"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createReferrals"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "firstMinters"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCreatorRewardRecipient"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  filters: {};
}
