/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ICreatorCommands {
  export type CommandStruct = { method: BigNumberish; args: BytesLike };

  export type CommandStructOutput = [method: bigint, args: string] & {
    method: bigint;
    args: string;
  };

  export type CommandSetStruct = {
    commands: ICreatorCommands.CommandStruct[];
    at: BigNumberish;
  };

  export type CommandSetStructOutput = [
    commands: ICreatorCommands.CommandStructOutput[],
    at: bigint
  ] & { commands: ICreatorCommands.CommandStructOutput[]; at: bigint };
}

export interface SaleStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contractName"
      | "contractURI"
      | "contractVersion"
      | "requestMint"
      | "resetSale"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestMint",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface SaleStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): SaleStrategy;
  waitForDeployment(): Promise<this>;

  interface: SaleStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contractName: TypedContractMethod<[], [string], "nonpayable">;

  contractURI: TypedContractMethod<[], [string], "nonpayable">;

  contractVersion: TypedContractMethod<[], [string], "nonpayable">;

  requestMint: TypedContractMethod<
    [
      sender: AddressLike,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      ethValueSent: BigNumberish,
      minterArguments: BytesLike
    ],
    [ICreatorCommands.CommandSetStructOutput],
    "nonpayable"
  >;

  resetSale: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contractName"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "contractVersion"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "requestMint"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      ethValueSent: BigNumberish,
      minterArguments: BytesLike
    ],
    [ICreatorCommands.CommandSetStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resetSale"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
