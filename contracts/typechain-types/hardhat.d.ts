/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "IContractMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContractMetadata__factory>;
    getContractFactory(
      name: "IHasContractName",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasContractName__factory>;
    getContractFactory(
      name: "IERC20Minter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minter__factory>;
    getContractFactory(
      name: "ILimitedMintPerAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILimitedMintPerAddress__factory>;
    getContractFactory(
      name: "ILimitedMintPerAddressErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILimitedMintPerAddressErrors__factory>;
    getContractFactory(
      name: "IMinter1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinter1155__factory>;
    getContractFactory(
      name: "IProtocolRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolRewards__factory>;
    getContractFactory(
      name: "IVersionedContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersionedContract__factory>;
    getContractFactory(
      name: "ERC20Minter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Minter__factory>;
    getContractFactory(
      name: "IZora1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZora1155__factory>;
    getContractFactory(
      name: "SaleStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaleStrategy__factory>;
    getContractFactory(
      name: "LimitedMintPerAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitedMintPerAddress__factory>;

    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "IContractMetadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IContractMetadata>;
    getContractAt(
      name: "IHasContractName",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHasContractName>;
    getContractAt(
      name: "IERC20Minter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Minter>;
    getContractAt(
      name: "ILimitedMintPerAddress",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILimitedMintPerAddress>;
    getContractAt(
      name: "ILimitedMintPerAddressErrors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILimitedMintPerAddressErrors>;
    getContractAt(
      name: "IMinter1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinter1155>;
    getContractAt(
      name: "IProtocolRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolRewards>;
    getContractAt(
      name: "IVersionedContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVersionedContract>;
    getContractAt(
      name: "ERC20Minter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Minter>;
    getContractAt(
      name: "IZora1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZora1155>;
    getContractAt(
      name: "SaleStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SaleStrategy>;
    getContractAt(
      name: "LimitedMintPerAddress",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitedMintPerAddress>;

    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "IContractMetadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IContractMetadata>;
    deployContract(
      name: "IHasContractName",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHasContractName>;
    deployContract(
      name: "IERC20Minter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Minter>;
    deployContract(
      name: "ILimitedMintPerAddress",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILimitedMintPerAddress>;
    deployContract(
      name: "ILimitedMintPerAddressErrors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILimitedMintPerAddressErrors>;
    deployContract(
      name: "IMinter1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinter1155>;
    deployContract(
      name: "IProtocolRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolRewards>;
    deployContract(
      name: "IVersionedContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVersionedContract>;
    deployContract(
      name: "ERC20Minter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Minter>;
    deployContract(
      name: "IZora1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZora1155>;
    deployContract(
      name: "SaleStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SaleStrategy>;
    deployContract(
      name: "LimitedMintPerAddress",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LimitedMintPerAddress>;

    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "IERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "IContractMetadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IContractMetadata>;
    deployContract(
      name: "IHasContractName",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHasContractName>;
    deployContract(
      name: "IERC20Minter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Minter>;
    deployContract(
      name: "ILimitedMintPerAddress",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILimitedMintPerAddress>;
    deployContract(
      name: "ILimitedMintPerAddressErrors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILimitedMintPerAddressErrors>;
    deployContract(
      name: "IMinter1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinter1155>;
    deployContract(
      name: "IProtocolRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolRewards>;
    deployContract(
      name: "IVersionedContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVersionedContract>;
    deployContract(
      name: "ERC20Minter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Minter>;
    deployContract(
      name: "IZora1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZora1155>;
    deployContract(
      name: "SaleStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SaleStrategy>;
    deployContract(
      name: "LimitedMintPerAddress",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LimitedMintPerAddress>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
