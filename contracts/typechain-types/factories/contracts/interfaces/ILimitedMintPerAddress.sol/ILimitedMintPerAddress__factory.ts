/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ILimitedMintPerAddress,
  ILimitedMintPerAddressInterface,
} from "../../../../contracts/interfaces/ILimitedMintPerAddress.sol/ILimitedMintPerAddress";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requestedAmount",
        type: "uint256",
      },
    ],
    name: "UserExceedsMintLimit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "getMintedPerWallet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ILimitedMintPerAddress__factory {
  static readonly abi = _abi;
  static createInterface(): ILimitedMintPerAddressInterface {
    return new Interface(_abi) as ILimitedMintPerAddressInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ILimitedMintPerAddress {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ILimitedMintPerAddress;
  }
}
